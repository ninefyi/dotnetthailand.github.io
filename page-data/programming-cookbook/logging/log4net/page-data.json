{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/logging/log4net","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"aa5800d3-4ff8-5c57-8363-897e8f1d2b05","title":"log4net","slug":"/programming-cookbook/logging/log4net"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"log4net\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to setup log4net\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create a new .NET Framework console project. This can be applied to .NET Core\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install log4net Nuget package.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"install-package log4net\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set up the main class.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  // Import log4net classes.\\n  using log4net;\\n  using log4net.Config;\\n\\n  public static class Program\\n  {\\n      // Define a static logger variable so that it references the\\n      // Logger instance named \\\"Program\\\".\\n      private static readonly ILog log = LogManager.GetLogger(typeof(Program));\\n\\n      public static void Main(string[] args)\\n      {\\n          // Set up an XmlConfigurator to use log4net XML configuration file\\n          XmlConfigurator.Configure(new FileInfo(\\\"log4net.config\\\"));\\n\\n          log.Info(\\\"Entering application.\\\");\\n      }\\n  }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"log4net.config\"), \" file at root level of the project and set \\\"copy to output directory\\\" as \\\"copy as newer\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add configuration content to log4net.config.\")), mdx(\"h1\", null, \"Rolling file appender\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n<log4net>\\n    <!--\\n         Roll log files on a date period and within a date period on file size.\\n         For each day only the last 10 files of 1MB will be kept.\\n         We can't keep a file on date/time boundaries, more details https://issues.apache.org/jira/browse/LOG4NET-27\\n         This problem is fixed by creating a cron job to delete log files and keep some latest days/months.\\n     -->\\n    <appender name=\\\"RollingLogFileAppender\\\" type=\\\"log4net.Appender.RollingFileAppender\\\">\\n        <!-- The location of the logging file which is relative to the application base directory -->\\n        <!-- You will find a log file in bin/Debug/logs folder -->\\n        <file value=\\\"logs/\\\" />\\n        <appendToFile value=\\\"true\\\" />\\n        <rollingStyle value=\\\"Composite\\\" />\\n\\n        <!-- Define the date pattern as a file name and create a log file for each day-->\\n        <!-- For more format https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings -->\\n        <!--<datePattern value=\\\"yyyy-MM-dd-HH-mm-ss.'log'\\\" /> create a new file every second, useful for debugging  -->\\n        <datePattern value=\\\"yyyy-MM-dd.'log'\\\" />\\n\\n        <!--\\n            Set to true to always logs to log.txt and then renames the rolling file when appropriate.\\n            It makes the active log file super obvious.\\n        -->\\n        <staticLogFileName value=\\\"false\\\"/>\\n        <maxSizeRollBackups value=\\\"10\\\" />\\n        <maximumFileSize value=\\\"1MB\\\" />\\n        <layout type=\\\"log4net.Layout.PatternLayout\\\">\\n        <!-- https://logging.apache.org/log4net/log4net-1.2.13/release/sdk/log4net.Layout.PatternLayout.html -->\\n            <conversionPattern value=\\\"%date{yyyy-mm-yy HH:mm:ss:fff} [%-5level] line:%line method:%method - %message%newline\\\" />\\n        </layout>\\n    </appender>\\n\\n    <root>\\n        <!-- To log all message levels -->\\n        <level value=\\\"all\\\" />\\n        <appender-ref ref=\\\"RollingLogFileAppender\\\" />\\n    </root>\\n</log4net>\\n\")), mdx(\"h1\", null, \"Example file structure of the project\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Project folder\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ProjectName.csproj\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Program.cs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"log4net.config\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"packages.config\")))), mdx(\"h1\", null, \"Logging level\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-setup-log4net","title":"How to setup log4net"},{"url":"#rolling-file-appender","title":"Rolling file appender"},{"url":"#example-file-structure-of-the-project","title":"Example file structure of the project"},{"url":"#logging-level","title":"Logging level"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/logging/log4net.md","fields":{"gitLogLatestAuthorName":"aaronamm","gitLogLatestAuthorEmail":"theeranitp@gmail.com","gitLogLatestDate":"2 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"a08ce75ae4df204ceaa747c8866d6441c77b3284","date":"2021-03-24 05:27"}},"pageContext":{"id":"aa5800d3-4ff8-5c57-8363-897e8f1d2b05"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}